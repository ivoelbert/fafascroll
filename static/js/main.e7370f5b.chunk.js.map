{"version":3,"sources":["Lib/utils/utils.ts","Lib/context/ScrollerContext.tsx","Lib/hooks/useScrollerContext.ts","Lib/components/Scroller/Scroller.tsx","Lib/context/SectionContext.tsx","Lib/components/Section/Section.tsx","Lib/hooks/useScollPosition.ts","Components/ScrollerPart/ScrollerPart.tsx","Components/Closer/Closer.tsx","App.tsx","index.tsx"],"names":["clamp","value","min","max","Math","mapValue","num","in_min","in_max","out_min","out_max","voidContext","getHeight","Error","addSection","_name","_height","isSectionVisible","scrollerRef","ScrollerContextValue","React","createContext","ScrollerProvider","children","useState","sections","setSections","scrollPos","position","setPosition","handler","useCallback","event","scrollY","window","useEffect","addEventListener","removeEventListener","useWindowScroll","winHeight","innerHeight","height","setHeight","useWindowHeight","useRef","themeHandler","sectionsHeight","length","sectionName","sectionHeight","find","name","newHeight","isVisible","heightOffset","current","el","yPos","offsetTop","clientTop","offsetParent","getPosition","normalizedScroll","queriedSectionIndex","findIndex","queriedSection","prevSectionHeight","Provider","useScrollerContext","useContext","Scroller","className","SectionsContainer","ref","style","SectionContextValue","relativePosition","absolutePosition","SectionProvider","AnimatedSection","posed","div","visible","opacity","hidden","Section","duration","isActive","pose","useScrollPosition","Shadow","scale","transparent","backgroundColor","transform","FirstSection","n","f","idx","timing","shadowCount","key","Array","map","_","SecondSection","width","ThirdSection","ang","ScrollerPart","Closer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7370f5b.chunk.js","sourcesContent":["export const animationTiming = (time: number, from: number, to: number): number => {\n    return clamp(mapValue(time, from, to, 0, 1), 0, 1);\n}\n\nexport const clamp = (value: number, min: number, max: number): number => {\n    return Math.min(Math.max(value, min), max);\n};\n\nexport const mapValue = (num: number, in_min: number, in_max: number, out_min: number, out_max: number): number => {\n    return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\n};\n\nexport type TabulateFunction<T> = (idx: number) => T;\nexport const tabulate = <T>(n: number, f: TabulateFunction<T>): T[] => {\n    return [...new Array(n)].map((_, idx: number): T => f(idx));\n};\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { clamp, mapValue } from '../utils/utils';\n\ntype Section = { name: string; height: number };\n\nexport interface ScrollerContext {\n    getHeight: () => number;\n    addSection: (name: string, sectionHeight: number) => void;\n    isSectionVisible: (name: string) => [boolean, number];\n    scrollerRef: React.RefObject<HTMLDivElement> | null;\n}\n\n// Default context, SHOULDN'T HAPPEN\nconst voidContext: ScrollerContext = {\n    getHeight: () => {\n        throw new Error(\"Can't use context outside ScrollerProvider\");\n    },\n    addSection: (_name: string, _height: number) => {\n        throw new Error(\"Can't use context outside ScrollerProvider\");\n    },\n    isSectionVisible: (_name: string) => {\n        throw new Error(\"Can't use context outside ScrollerProvider\");\n    },\n    scrollerRef: null,\n};\n\nexport const ScrollerContextValue = React.createContext<ScrollerContext>(voidContext);\n\nconst getPosition = (el: HTMLElement) => {\n    var yPos = 0;\n\n    while (el) {\n        yPos += el.offsetTop + el.clientTop;\n        el = el.offsetParent as any;\n    }\n\n    return yPos;\n};\n\nconst useWindowScroll = (): number => {\n    const [position, setPosition] = useState(0);\n\n    const handler = useCallback((event: Event) => {\n        const { scrollY } = window;\n        setPosition(scrollY);\n    }, []);\n\n    useEffect(() => {\n        window.addEventListener('scroll', handler);\n\n        return () => {\n            window.removeEventListener('scroll', handler);\n        };\n    }, [handler]);\n\n    return position;\n};\n\nconst useWindowHeight = (): number => {\n    const [height, setHeight] = useState(window.innerHeight);\n\n    const handler = useCallback((event: Event) => {\n        setHeight(window.innerHeight);\n    }, []);\n\n    useEffect(() => {\n        window.addEventListener('resize', handler);\n\n        return () => {\n            window.removeEventListener('resize', handler);\n        };\n    }, [handler]);\n\n    return height;\n};\n\nexport const ScrollerProvider: React.FC = ({ children }) => {\n    const [sections, setSections] = useState<Section[]>([]);\n\n    const scrollPos: number = useWindowScroll();\n    const winHeight: number = useWindowHeight();\n\n    const scrollerRef = useRef<HTMLDivElement>(null);\n\n    const addSection = (sectionName: string, sectionHeight: number): void => {\n        // Bail out if that section is already in the state\n        if (sections.find(({ name }) => name === sectionName)) {\n            return;\n        }\n\n        setSections((sections: Section[]) => {\n            const oldHeight = sections.length > 0 ? sections[sections.length - 1].height : 0;\n            const newHeight = oldHeight + sectionHeight;\n            return [...sections, { name: sectionName, height: newHeight }];\n        });\n    };\n\n    const isSectionVisible = (name: string): [boolean, number] => {\n        if (sections.length === 0) {\n            return [false, 0];\n        }\n\n        const heightOffset = scrollerRef.current ? getPosition(scrollerRef.current) : 0;\n        const normalizedScroll = scrollPos - heightOffset;\n\n        const queriedSectionIndex: number = sections.findIndex(({ name: secName }) => secName === name);\n        const queriedSection: Section = sections[queriedSectionIndex];\n        const prevSectionHeight: number = queriedSectionIndex === 0 ? 0 : sections[queriedSectionIndex - 1].height;\n\n        let isVisible: boolean;\n        switch (queriedSectionIndex) {\n            case 0:\n                isVisible = normalizedScroll < queriedSection.height;\n                break;\n\n            case sections.length - 1:\n                isVisible = normalizedScroll > prevSectionHeight;\n                break;\n\n            default:\n                isVisible = normalizedScroll > prevSectionHeight && normalizedScroll < queriedSection.height;\n        }\n\n        const offset = clamp(mapValue(normalizedScroll, prevSectionHeight, queriedSection.height, 0, 1), 0, 1);\n\n        return [isVisible, offset];\n    };\n\n    const getHeight = useCallback((): number => {\n        const sectionsHeight: number = sections.length > 0 ? sections[sections.length - 1].height : 0;\n        return winHeight + sectionsHeight;\n    }, [sections, winHeight]);\n\n    const themeHandler: ScrollerContext = {\n        getHeight,\n        addSection,\n        isSectionVisible,\n        scrollerRef,\n    };\n\n    return <ScrollerContextValue.Provider value={themeHandler}>{children}</ScrollerContextValue.Provider>;\n};\n","import { useContext } from 'react';\nimport { ScrollerContextValue, ScrollerContext } from '../context/ScrollerContext';\n\nexport const useScrollerContext = (): ScrollerContext => {\n    return useContext<ScrollerContext>(ScrollerContextValue);\n}","import React from 'react';\nimport { ScrollerProvider } from '../../context/ScrollerContext';\nimport { useScrollerContext } from '../../hooks/useScrollerContext';\nimport './Scroller.scss';\n\ninterface ScrollerProps {\n    className?: string;\n}\n\nexport const Scroller: React.FC<ScrollerProps> = ({ children, className = '' }) => {\n    return (\n        <ScrollerProvider>\n            <SectionsContainer className={className}>{children}</SectionsContainer>\n        </ScrollerProvider>\n    );\n};\n\ninterface SectionsContainerProps {\n    className: string;\n}\n\nconst SectionsContainer: React.FC<SectionsContainerProps> = ({ children, className }) => {\n    const { getHeight, scrollerRef } = useScrollerContext();\n    const height: number = getHeight();\n\n    return (\n        <div ref={scrollerRef} className={`fafascroller-container ${className}`} style={{ height }}>\n            {children}\n        </div>\n    );\n};\n","import React from 'react';\n\nexport interface SectionContext {\n    relativePosition: number;\n    absolutePosition: number;\n}\n\n// Default context, SHOULDN'T HAPPEN\nconst voidContext: SectionContext = {\n    relativePosition: 0,\n    absolutePosition: 0,\n};\n\nexport const SectionContextValue = React.createContext<SectionContext>(voidContext);\n\ninterface Props {\n    relativePosition: number;\n    absolutePosition: number;\n}\n\nexport const SectionProvider: React.FC<Props> = ({ children, relativePosition, absolutePosition }) => {\n    const themeHandler: SectionContext = {\n        relativePosition,\n        absolutePosition,\n    };\n\n    return <SectionContextValue.Provider value={themeHandler}>{children}</SectionContextValue.Provider>;\n};\n","import React from 'react';\nimport { useScrollerContext } from '../../hooks/useScrollerContext';\nimport { SectionProvider } from '../../context/SectionContext';\nimport posed from 'react-pose';\n\ninterface Props {\n    duration: number;\n    name: string;\n}\n\nconst AnimatedSection = posed.div({\n    visible: { opacity: 1 },\n    hidden: { opacity: 0 },\n});\n\nexport const Section: React.FC<Props> = ({ children, duration, name }) => {\n    // Add the section\n    const { addSection, isSectionVisible } = useScrollerContext();\n    addSection(name, duration);\n\n    const [isActive, relativePosition] = isSectionVisible(name);\n    const absolutePosition = duration * relativePosition;\n\n    return (\n        <AnimatedSection className=\"sticky-section\" pose={isActive ? 'visible' : 'hidden'}>\n            <SectionProvider relativePosition={relativePosition} absolutePosition={absolutePosition}>\n                {children}\n            </SectionProvider>\n        </AnimatedSection>\n    );\n};\n","import { useContext } from 'react';\nimport { SectionContextValue, SectionContext } from '../context/SectionContext';\n\nexport const useScrollPosition = (): SectionContext => {\n    return useContext<SectionContext>(SectionContextValue);\n};\n","import React from 'react';\nimport { Scroller } from '../../Lib/components/Scroller/Scroller';\nimport { Section } from '../../Lib/components/Section/Section';\nimport { useScrollPosition } from '../../Lib/hooks/useScollPosition';\nimport { tabulate, animationTiming } from '../../Lib/utils/utils';\nimport './ScrollerPart.scss';\n\ninterface ShadowProps {\n    scale: number;\n    transparent: boolean;\n}\nconst Shadow: React.FC<ShadowProps> = ({ scale, transparent }) => {\n    return <div className=\"shadow\" style={{ backgroundColor: transparent ? '#2b2b2b50' : '#2b2b2b', transform: `translateY(-50%) scaleY(${scale})` }}></div>;\n};\n\nconst FirstSection: React.FC = () => {\n    const { relativePosition } = useScrollPosition();\n    const shadowCount = 5;\n\n    return (\n        <div className=\"section first-section\">\n            <h1>0xFAFAFA</h1>\n            {tabulate(shadowCount, (idx: number) => {\n                const delta = 1 / shadowCount;\n                const timing = animationTiming(relativePosition, delta * idx, 1);\n\n                return <Shadow transparent={idx !== shadowCount - 1} key={idx} scale={timing} />;\n            })}\n        </div>\n    );\n};\n\nconst SecondSection: React.FC = () => {\n    const { relativePosition } = useScrollPosition();\n\n    return (\n        <div className=\"section second-section\">\n            <p>second section!</p>\n            <div style={{ backgroundColor: 'white', height: 50, width: '100%' }}>\n                <div style={{ backgroundColor: 'red', height: '100%', width: `${relativePosition * 100}%` }}></div>\n            </div>\n        </div>\n    );\n};\n\nconst ThirdSection: React.FC = () => {\n    const { relativePosition } = useScrollPosition();\n    const ang: number = relativePosition * 90;\n\n    return (\n        <div className=\"section third-section\">\n            <p>third section!</p>\n            <div style={{ backgroundColor: 'white', height: 100, width: 100, transform: `rotate(${ang}deg)` }}></div>\n        </div>\n    );\n};\n\nexport const ScrollerPart: React.FC = () => {\n    return (\n        <Scroller className=\"scroller-container\">\n            <Section name=\"first-section\" duration={5000}>\n                <FirstSection />\n            </Section>\n            <Section name=\"second-section\" duration={2000}>\n                <SecondSection />\n            </Section>\n            <Section name=\"third-section\" duration={1000}>\n                <ThirdSection />\n            </Section>\n        </Scroller>\n    );\n};\n","import React from 'react';\n\nexport const Closer: React.FC = () => {\n    return (\n        <div>\n            <p>That was nice, wasn't it?</p>\n            <p>\n                Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another\n                big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big\n                paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to\n                close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this\n                up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now\n                another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big\n                paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to\n                close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this\n                up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now\n                another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big\n                paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to\n                close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this\n                up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now\n                another big paragraph to close this up. Now another big paragraph to close this up. Now another big paragraph to close this up. Now another big\n                paragraph to close this up. Now another big paragraph to close this up.\n            </p>\n            <p>\n                And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler\n                content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some\n                filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And\n                some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler\n                content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some\n                filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And\n                some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler\n                content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some\n                filler content! And some filler content! And some filler content! And some filler content! And some filler content! And some filler content! And\n                some filler content! And some filler content! And some filler content!\n            </p>\n            <p>Hope you liked it!</p>\n        </div>\n    );\n};\n","import React from 'react';\nimport { ScrollerPart } from './Components/ScrollerPart/ScrollerPart';\nimport { Closer } from './Components/Closer/Closer';\nimport './App.scss';\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            <ScrollerPart />\n            <Closer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}